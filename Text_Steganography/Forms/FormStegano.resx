<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Стеганография, метод скрытой передачи информации, при котором сообщение или данные скрываются внутри других данных таким образом, чтобы наблюдатель не мог даже подозревать о наличии скрытой информации, является одним из самых старых и в то же время актуальных методов обеспечения конфиденциальности. В течение многих столетий она использовалась для скрытой передачи секретной информации. С развитием технологий и эволюцией методов передачи информации стеганография становится все более сложной и изобретательной, включая новые подходы к скрытию данных в цифровых форматах. В отличие от криптографии, которая скрывает содержание сообщения путем его шифрования, стеганография занимается скрытием самого факта передачи информации.
Классификация методов стеганографии включает разделение их по различным критериям, таким как тип используемого носителя, способ внедрения скрытой информации, алгоритмы обнаружения и извлечения скрытых данных и другие. Одним из основных критериев классификации является тип носителя, в который встраивается скрытая информация. Это может быть аудио, видео, изображения, текстовые документы, сетевой трафик, файловые системы и другие. В зависимости от типа носителя используются различные методы стеганографии. Другим критерием классификации является метод внедрения скрытой информации в носитель. Это может быть метод замены младших битов, преобразование частотного спектра, изменение структуры файла, использование промежутков между символами и другие. Различные методы имеют свои преимущества и недостатки в зависимости от типа носителя и требований к надежности и скрытности передачи информации. Также методы стеганографии могут быть классифицированы по алгоритмам обнаружения и извлечения скрытых данных. Это может включать в себя использование статистических анализов, машинного обучения, алгоритмов поиска паттернов и других методов для обнаружения скрытой информации в носителе.
Методы стеганографии могут быть классифицированы на физические и цифровые в зависимости от того, используют ли они физические объекты и свойства природы или цифровые данные и компьютерные алгоритмы для скрытой передачи информации. Оба типа методов имеют свои преимущества и недостатки в зависимости от конкретных требований и условий использования. Физические методы могут быть особенно полезны в ситуациях, когда цифровые данные недоступны или неприменимы, например, при маркировке физических объектов. В то время как цифровые методы обычно более универсальны и могут быть эффективны в цифровой среде передачи данных.
Цифровые методы стеганографии используют цифровые данные и компьютерные алгоритмы для скрытой передачи информации. Это может включать в себя такие методы, как:
- Аудио-стеганография. Использует аудиофайлы в качестве носителя для скрытой передачи информации.
- Видео-стеганография. Использует видеофайлы в качестве носителя для скрытой передачи информации. 
- Стеганография в изображениях. Использует изображения в качестве носителя для скрытой передачи информации. 
- Текстовая стеганография. Использует текстовые документы в качестве носителя для скрытой передачи информации.
- Сетевая стеганография. Использует сетевые протоколы и трафик в качестве носителя для скрытой передачи информации. 
Текстовая стеганография является одним из методов скрытой передачи информации, который основывается на встраивании данных в текстовые документы таким образом, чтобы они оставались незамеченными для наблюдателей. В текстовой стеганографии существует несколько методов, каждый из которых представляет собой уникальный подход к скрытой передаче информации. Эти методы различаются по способу встраивания скрытой информации в текст, используемым текстовым форматам, степени видимости скрытых данных и уровню безопасности. Каждый метод имеет свои преимущества и недостатки, и выбор конкретного метода зависит от целей использования, требований безопасности и желаемого уровня видимости скрытой информации.</value>
  </data>
</root>